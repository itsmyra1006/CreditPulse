import Sentiment from 'sentiment';

const sentiment = new Sentiment();

/**
 * Analyzes the sentiment of a list of news articles.
 * @param {Array<object>} articles - An array of news articles from NewsAPI.
 * @returns {{avgSentimentScore: number, analyzedArticles: Array<object>}} - An object containing the average sentiment score and the articles with sentiment data.
 */
function analyzeNewsSentiment(articles) {
  if (!articles || articles.length === 0) {
    return {
      avgSentimentScore: 0,
      analyzedArticles: [],
    };
  }

  let totalScore = 0;
  const analyzedArticles = [];

  articles.forEach(article => {
    // Sentiment analysis provides a 'score' and 'comparative' score.
    // The score is the sum of valence of all words.
    // We use the comparative score, which is score / word_count.
    const result = sentiment.analyze(article.title || '');
    totalScore += result.comparative;

    let sentimentLabel = 'Neutral';
    if (result.comparative > 0.1) sentimentLabel = 'Positive';
    if (result.comparative < -0.1) sentimentLabel = 'Negative';
    
    analyzedArticles.push({
        headline: article.title,
        sentiment: sentimentLabel,
        // The impact will be generated by the explainability layer
    });
  });

  const avgSentimentScore = totalScore / articles.length;

  return {
    avgSentimentScore,
    analyzedArticles: analyzedArticles.slice(0, 3), // Return top 3 for the dashboard
  };
}

// This line is the crucial part that makes the function available to other files.
export { analyzeNewsSentiment };
